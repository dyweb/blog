[{"content":"\n\n#### 转载自 [gaocegege 的博客](http://gaocegege.com/Blog/%E9%98%85%E8%AF%BB/sre-0)\n\n## SRE 介绍\n\nSRE，全称是 Site Reilability Engineer，是一个类似于运维，但是跟传统运维不一样的职业，更加偏向于 DevOps。谷歌在 [SRE-谷歌运维解密](https://book.douban.com/subject/26875239/) 一书中分享了 SRE 的工作职责，以及谷歌在自己的运维工作中的一些经验。\n\n## 本文介绍\n\n这篇博客是系列文章中的第一篇，主要分享在阅读这本书时的一些感想。这本书在我看来更加适合在分布式领域或者在运维领域工作的工程师阅读，对于一个还在念书，没有完整接触过分布式系统实现的新手来说，有些过早了。因此就当是抛砖引玉，随便写写吧。\n\n这次关注的是书中的第六章，分布式系统的监控。\n\n## 关于作者\n\n第六章的作者是 [Rob Ewaschuk](https://www.linkedin.com/in/robewaschuk)。作者主要工作的领域是分布式存储，而且在自我介绍中写道自己在谷歌干的很过瘾，16-17年是不打算换工作的。O'Reilly 摘录了他在 SRE 一书中关于分布式监控的部分，做了一本电子书 [Monitoring Distributed Systems](http://www.oreilly.com/webops-perf/free/monitoring-distributed-systems.csp)。\n\n## 阅读之前\n\n在读文章之前，我对监控的了解非常浅薄。因为无论是在学校还是在之前实习，都没有涉及到对生产系统进行监控的工作。在念了研究生之后，稍微了解了一些关于分布式监控的知识。[Dapper, a Large-Scale Distributed Systems Tracing Infrastructure](https://static.googleusercontent.com/media/research.google.com/zh-CN//pubs/archive/36356.pdf) 是谷歌在 2010 年发表的论文，是关于其内部的分布式 tracing 系统的一个介绍性的论文。Tracing 在我的理解是细粒度监控中很关键的一部分。点评开源了一套这样的系统 [CAT](https://github.com/dianping/cat)。这些系统的作用就是跟踪系统相互之间的调用。比如 Web 前端调用了后端，就会生成一个从前端指向后端的 trace 记录。业界比较常见的实现是埋点或者修改字节码，前者更加可行。在阅读之前，对于分布式监控的了解也就仅限于此了。\n\n虽说读过相关论文，但是并没有真实使用过，最多就是去过点评，见过点评的 CAT 的 dashboard 是长什么样子的。\n\n## 正文\n\n全文中提到的一些东西让我非常感兴趣。其中有一句话：\n\n\u003e我们会避免任何『魔法』系统--例如视图自动学习阈值或者自动检测故障原因的系统。\n\n之前在去大众点评学习 CAT 系统时，听他们说下一步发展规划中，就有利用机器学习来学习阈值和原因的想法。我认为谷歌在为什么要保持监控系统简单时没有说清楚，这可能是跟他们的监控规模和信奉的哲学有关。他们把这类复杂的有各种特性的系统称为『魔法』系统，因为我也没有什么发言权。但是在我看来，随着复杂性的上升，引入机器学习等等是自动化的新阶段。现在可能人工的方式或者硬编码等等方式还是可以操作的，可能谷歌考虑到监控系统要尽可能稳定吧。但是机器学习可以更好地取代人工，就像在容量规划方面，我始终认为机器学习会比经验估计的更准。\n\n书中写了四个谷歌认为的黄金监控指标，分别是延迟、流量、错误和饱和度。对于延迟，他们提到的一点对我来说特别具有启发性，那就是要区分成功请求和错误请求的延迟。这两类请求有着不同的模式，是不能混为一谈的。之前用过的少数几个监控的工具都没有区分正确与错误请求的能力。这一点是在看了这本书后才学到的。\n\n还有一个比较有趣的指标，是饱和度。饱和度是指服务容量有多满，一般是用瓶颈资源的使用率来衡量。这样衡量饱和度的方式很取巧，之前没有过工程经验，都是各种指标全看一遍，最后看哪个资源不够用了，就断定服务满载了。如果事先判断好是 Memory-bound 还是 CPU-bound 类型的服务，然后每次只需要看对应的瓶颈资源就好了。\n\n关于长尾问题，谷歌给出了一种监控的方法，使用直方分布图而不是平均值来进行展示。因为可能一小部分请求导致了长尾，但是平均值是看不出这个问题的。\n\n在监控系统构建后，有一个值得考虑的问题，是短期可用性与长期可用性的冲突。短期的可用性体现在对问题的及时修复上，而长期的可用性在于对系统造成问题的根源的消除上。看起来这两者是统一的，但是其实是冲突的。人的精力是有限的，如果一直在处理 On-Call 的问题，那必然会导致缺少时间投入到根源性问题的解决上，这时需要权衡，放弃一些 On-Call 非核心的问题，去优化系统，提高长期预期的可用性。\n\n## 下文预告\n\n下一篇文章将会谈谈有关发布工程（Releasing Engineering）的事情。\n\n## 系列文章\n\n* [Google SRE 阅读笔记(1)-监控](http://blog.dongyueweb.com/google_sre_%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%281%29-%E7%9B%91%E6%8E%A7.html)\n\n## License\n\n- This article is licensed under [CC BY-NC-SA 3.0](https://creativecommons.org/licenses/by-nc-sa/3.0/).\n- Please contact \u003cmarketing@dongyue.io\u003e for commerical use.\n","cover":"","link":"google_sre_阅读笔记(1)-监控.html","preview":"\u003cp\u003eSRE，全称是 Site Reilability Engineer，是一个类似于运维，但是跟传统运维不一样的职业，更加偏向于 DevOps。谷歌在 \u003ca href=\"https://book.douban.com/subject/26875239/\"\u003eSRE-谷歌运维解密\u003c/a\u003e 一书中分享了 SRE 的工作职责，以及谷歌在自己的运维工作中的一些经验。\u003c/p\u003e\n","title":"Google SRE 阅读笔记(1)-监控"},{"content":"\n\n今天为东岳搭建了一个饥荒的服务器，并不是特别复杂。饥荒对于服务器的要求是：\n\n```text\nInternet(Upload) = 8Kbytes/player/s\nRam = around 65Mbytes/player\nCPU = N/A\nVCRedist_2008 (x86)\n```\n\n因此选定配置的时候要计算下，服务器的最低配置要求。因为考虑到我们的玩家数最多也就20人左右，长期在线人数能在3-4人就不错了，因此一台1核2G内存的机器就可以满足我们的要求了。\n\n我们中的绝大多数玩家，都是在华东地区的，而只有一个美帝玩家。因此在服务器的选择上，华东节点是最合适的。在考察了包括阿里云、美团云、青云、腾讯云、Hyper.sh 在内的众多云服务提供商后，选择了最便宜的腾讯云。就流量来说，基本所有的服务商都是一个价钱，但是服务器的价格从 85 到 125 不等。Hyper.sh 因为没有华东节点，就没有关注价格。因为 steam 的 cmd 运行需要 32 位的环境，而且服务器的内存没有超过 4G，因此选择了 32位 Ubuntu 16.04.1 LTS。因为选择的云服务提供商和系统都很大众，因此在过程中并没有遇到什么坑。\n\n## 安装 steam 和 饥荒\n\n按照官方的文章，没什么好说的，不过为了简单，在搭建的过程中省略了创建用户的过程，直接在默认的用户目录下进行的。还有就是需要安装两个在官方教程中没有写到的东西：xfonts-75dpi 和 xfonts-100dpi，不然在运行 steamcmd.sh 的时候会报错 `Steam needs to be online to update`。\n\n```bash\nsudo apt-get install libgcc1\nsudo apt-get install xfonts-75dpi xfonts-100dpi\nmkdir ~/steamcmd\ncd ~/steamcmd\nwget https://steamcdn-a.akamaihd.net/client/installer/steamcmd_linux.tar.gz\ntar -xvzf steamcmd_linux.tar.gz\n./steamcmd.sh\nlogin anonymous\n# replace \u003cuser\u003e with your current user. if you use qcloud, ubuntu is the default username.\nforce_install_dir /home/\u003cuser\u003e/steamapps/DST\napp_update 343050 validate\nquit\ncd /home/steam/steamapps/DST/bin/\n```\n\n## 添加配置文件\n\n至此游戏服务器的所有二进制和依赖都安装好了，接下来需要进行配置。在 `/home/\u003cuser\u003e/.klei/DoNotStarveTogether/Cluster_1` 目录下需要建立两个文件，cluster.ini 和 cluster_token.txt。前者是对服务器的配置，后者是在饥荒的客户端游戏中生成的一个 token，猜测会用来校验玩家是否在使用正版游戏，等等。\n\ncluster.ini 文件内容很简单：\n\n```text\n[network]\ncluster_name = \u003ccluster_name\u003e\ncluster_intention = cooperative\ncluster_description = \u003ccluster_description\u003e\ncluster_port = 10999\ncluster_password = \u003cpasswd\u003e\n\n[misc]\nconsole_enabled = true\n\n[gameplay]\nmax_players = \u003cmax_players_num\u003e\npvp = false\ngame_mode = endless\npause_when_empty = true\n```\n\ncluster_token.txt 文件的内容需要用饥荒的客户端来生成，输入 `~` 打开游戏内置的 console，输入 `TheNet:GenerateClusterToken()`，不同系统会在不同位置生成一个 token：\n\n```text\nWindows:\n/My Documents/Klei/DoNotStarveTogether/cluster_token.txt\n\nLinux:\n ~/.klei/DoNotStarveTogether/cluster_token.txt\n\nMac OS X:\n~/Documents/Klei/DoNotStarveTogether/cluster_token.txt\n```\n\n然后将文件内容拷贝到 `/home/\u003cuser\u003e/.klei/DoNotStarveTogether/Cluster_1/cluster_token.txt` 中就行。\n\n## 运行\n\n```bash\n/home/\u003cuser\u003e/steamapps/DST/bin/dontstarve_dedicated_server_nullrenderer\n```\n\n官方推荐使用 screen 来维持服务器在退出 ssh 连接后依然在运行，但你喜欢怎么做就随便了。\n\n## Reference\n\n* [Don’t Starve Together（饥荒）服务器搭建](https://www.nevermoe.com/?p=695)\n\n## License\n\n- This article is licensed under [CC BY-NC-SA 3.0](https://creativecommons.org/licenses/by-nc-sa/3.0/).\n- Please contact \u003cmarketing@dongyue.io\u003e for commerical use.\n","cover":"","link":"在32位_ubuntu_16.04.1_lts_上安装饥荒服务器.html","preview":"\u003cp\u003e今天为东岳搭建了一个饥荒的服务器，并不是特别复杂。\u003c/p\u003e\n","title":"在32位 Ubuntu 16.04.1 LTS 上安装饥荒服务器"},{"content":"\n\n## 简介\n\n[Ayi](https://github.com/dyweb/Ayi) 是一个跨平台的命令行工具，类似于[busybox](https://busybox.net/about.html)。\n开始于 2015 年 7 月。主要目的是为了方便配置环境和解决各种由于配置环境导致的问题，比如:\n\n\u003e - 我这里跑的好好的，怎么到了你那(服务器上)就挂了\n\u003e - 我用 Mac 自带的 PHP 和 Apache 就挺好，我不用 Vagrant 和 Nginx\n\u003e - 我就想用 Windows 下的一键安装包\n\n考虑到没钱给大家每人配个 Mac，以及东岳的男女比例。\n我们需要一个跨平台的配置环境和收集环境信息的工具，用于**快速**的解决上述问题。\n\n## 技术选型\n\n在选择 Ayi 使用的技术时主要考虑的是以下几个问题\n\n- 跨平台\n- 可维护性\n- 对于东岳其他项目的帮助\n\n\u003c!-- TODO:找不到是哪个 issue 了，倒是找到了 commit https://github.com/dyweb/Ayi/commit/3a96921ccb6b5edb7c294e2a1eab2b9e63cc130b --\u003e\n最开始和咩的考虑是使用 shell 来进行操作， 但是 shell 的问题在于很难维护，基本不可能测试。\n东岳 shell 用的很少，并且 shell 对于其他项目帮助十分有限。\n\n之后考虑到 PHP, python, java 都需要运行时，C/C++ 写起来太累， Rust 没人会 (那会还没有 Ivan 和 Codeworm)，\n就选择了 Golang，当时版本是 1.5。\n\nGolang 的主要优点是\n\n- 跨平台 \u0026 交叉编译\n- 简洁的包管理\n- 性能好，可以用来改进东岳现有的纯 PHP 服务端体系\n- 一个活跃的社区，PHP 沉浸在 CMS 和抄 Rails 中不能自拔，JS 日新月异\n- Google 老爹\n\n## 主要问题\n\n- 人太少，基本只有 @at15 (我) 一个人\n- 需求不是很明确\n- 对 Golang 语言本身很不熟悉\n- Golang 的一些工具链不是很成熟，比如不支持依赖的 vendor 。\n\n但是由于项目拖了很长时间，后面三个问题基本都解决了\n\n- 主要需求是\n  - 生成器\n  - 环境检查\n  - [git 操作的简化](https://github.com/dyweb/Ayi/tree/master/app/git)\n  - [makefile 类似的自动化工具](https://github.com/dyweb/Ayi/tree/master/util/runner)\n  - [静态 web 服务器](https://github.com/dyweb/Ayi/tree/master/app/web)\n  - [进程管理](https://github.com/dyweb/Ayi/pull/64)\n  - waka time 服务器\n  - 文件传输\n- go 的版本从 1.5 跳到了 1.7。原生支持 vendor 并且有了很多更好的依赖管理工具，比如 [glide](https://github.com/Masterminds/glide)\n\n第一个问题的话，基本无解，目前东岳经常写 Golang 的人好像只有我和策策。策策有空就要去陪妹子，自然不可能陪我来填坑。\n(要有妹子的话我还会去填坑么?)\n\n## 实现的功能\n\n### Git 操作的简化\n\n前提是：你习惯使用 Golang 的 workspace，有关 workspace 我在以前东岳的讲座中[有提到](http://dongyueweb.com/course/web/2016_Spring/environment/slide.html#/4) (btw: 按方向键`下`而不是`右`)。我个人的工作区是这样的 (`cd ~/workspace \u0026\u0026 tree -L 4`)。\n\n````\n├── bin\n│   ├── Ayi\n│   ├── glide\n│   └── ink\n├── pkg\n│   └── linux_amd64\n│       └── github.com\n│           └── dyweb\n└── src\n    └── github.com\n        ├── at15\n        │   └── at15.github.io\n        ├── dyweb\n        │   ├── Ayi\n        │   └── blog\n        └── xephonhq\n            └── xephon-b\n````\n\n当使用 `git clone` 时后面必须跟完整的 remote 地址，并且默认 clone 到当前文件夹下，而使用\n`Ayi git clone` 地址可以是浏览器地址，并且根据配置文件，可以支持非默认端口的 ssh，比如东岳的 GitLab。\n从下面的输出可以看到 `Ayi git clone github.com/at15/at15.gihub.io` 被展开成了\n`git clone git@github.com:at15/at15.github.io.git /home/at15/workspace/src/github.com/at15/at15.github.io`。\n\n````\nat15@pc4038:~/workspace|⇒  Ayi git clone github.com/at15/at15.github.io\nINFO[0000] git clone git@github.com:at15/at15.github.io.git /home/at15/workspace/src/github.com/at15/at15.github.io pkg=a.a.git\nCloning into '/home/at15/workspace/src/github.com/at15/at15.github.io'...\nremote: Counting objects: 435, done.\nremote: Total 435 (delta 0), reused 0 (delta 0), pack-reused 435\nReceiving objects: 100% (435/435), 3.56 MiB | 1.64 MiB/s, done.\nResolving deltas: 100% (234/234), done.\nChecking connectivity... done.\nINFO[0002] Sucessfully cloned to: /home/at15/workspace/src/github.com/at15/at15.github.io pkg=a.cmd\n````\n\nbtw: `Ayi` 的 log 组件看上去很像 [logrus](https://github.com/sirupsen/logrus)，但其实是[自己的轮子](https://github.com/dyweb/Ayi/pull/60)\n\n### 自动化\n\n自动化部分很类似 `npm run`，但是主要有以下区别\n\n- 使用 yaml 而不是 json, json 不支持注释，而且即使使用支持注释的 parser，编辑器也会有提示\n- 支持一个指令对应一系列命令, 类似 Travis 等 CI 的配置文件\n- 目前[新的重构](https://github.com/dyweb/Ayi/pull/64)可能会把它改成类似 + 的工具\n\n````\ndebug: true\ndep-install:\n    - go get github.com/at15/go.rice/rice\n    - go get github.com/mitchellh/gox\n    - glide install\ninstall:\n    - go build -o Ayi\n    - rice append -i github.com/dyweb/Ayi/app/web --exec Ayi\n    - sh -c \"mv Ayi $GOPATH/bin/Ayi\"\ntest:\n    - go install\n    - sh -c \"go test -v -cover $(glide novendor)\"\nscripts:\n    build: gox -output=\"build/Ayi_{{.OS}}_{{.Arch}}\"\n````\n\n内置指令如`install`, `test` 跟 `Ayi run \u003cscript-name\u003e` 都是使用 `util/runner`。\n目前准备把 runner 做成一个通用的 package，\n因此[又在重构](https://github.com/dyweb/Ayi/pull/64)来增加如下的功能\n\n- 类似 [Ansible](https://www.ansible.com/) 的更丰富的配置\n- 类似[ PM2](http://pm2.keymetrics.io/) 和 [Foreman](https://github.com/ddollar/foreman) 的进程管理\n\n### 静态服务器\n\n双击一个 html 文件多半会看不了，经典的解决方案是 `python -m SimpleHTTPServer \u003cport\u003e`，\n然而 windows 并不预装 py，而且有时候我想侧边栏显示文件树，markdown 高亮，\n遇到学习文件夹自动播放并且在没有插耳机的情况下静音。\n以前自己挖了一个坑 [doc-viewer](https://github.com/at15/doc-viewer) 。\nAyi 里目前只实现了基本的静态服务器 `Ayi web static`（不要被 help 骗了，根本没有 highlight)。\n\n````\n⇒  Ayi web static -h\nserve static file like python's SimpleHTTPServer, support highlight and markdown render inspired by https://github.com/at15/doc-viewer\n\nUsage:\n  Ayi web static [flags]\n\nGlobal Flags:\n      --config string   config file (default is $HOME/.ayi.yaml)\n  -n, --dry-run         show commands to execute\n  -p, --port int        port to listen on (default 3000)\n      --root string     server root folder\n  -v, --verbose         verbose output\n````\n\n## 使用开源库中遇到的问题\n\n虽然我们要站在巨人的肩膀上，但是站的久了就会发现有些巨人其实也有点 low，比如\n\n- 不支持 windows 的 [overall](https://github.com/go-playground/overalls)，[fork](https://github.com/at15/overalls)\n- 不支持 ignore 的 [go.rice](https://github.com/GeertJohan/go.rice), [fork](https://github.com/at15/go.rice/tree/feature/ignore) 和 [issue](https://github.com/GeertJohan/go.rice/issues/83)\n- 不支持 filter 的 [logrus](https://github.com/sirupsen/logrus)，还自带[统计运行时间的 bug](https://github.com/sirupsen/logrus/issues/457)\n\n一些库虽然 star 很高，但是其实如果仔细看代码的话会发现很多问题，同时看别人的代码可以学到一些自己以前忽略的问题，比如 Golang 里 struct 的方法的 thread safe。\n相关的 issue [dyweb/Ayi#59](https://github.com/dyweb/Ayi/issues/59) [at15/go-learning#3](https://github.com/at15/go-learning/issues/3)。\nlogrus 里对应的代码如下，作为**读者的练习**。\n\n\u003c!-- TODO: no highlight --\u003e\n````golang\n// This function is not declared with a pointer value because otherwise\n// race conditions will occur when using multiple goroutines\nfunc (entry Entry) log(level Level, msg string) {\n        var buffer *bytes.Buffer\n\tentry.Time = time.Now()\n\tentry.Level = level\n\tentry.Message = msg\n````\n\n一些(很多)开源库都维护状态都是很不乐观的，上面提到的几个开 PR 和 Feature Request 的 issue\n都是没人鸟的，既然已经看了那么多了，为什么不自己写呢？ 所以就开始造轮子了(其实还是想造轮子)。\n\nbtw: 在使用开源项目的过程中完全没有必要去埋怨作者无视你的各种请求和贡献，换位思考一下，\n你是愿意陪妹子玩一晚上呢，还是愿意改 Gayhub 上某个不认识的人反馈的 bug 呢 (没有妹子的人表示思考不出来，我选择去改 bug)。\n\n## 通用库 (轮子)\n\n自己造轮子有以下几个优点:\n\n- 方便维护\n- 代码风格一致，比如 [spf13](https://github.com/spf13/) 的 [viper](https://github.com/spf13/viper) 和 [cobra](https://github.com/spf13/cobra/)\n- 可以共用很多 code base\n\n当然关键还是程序员的天性，上面的都是借口。\n\nAyi 里抽出来的库有以下几个\n\n### Log\n\nhttps://github.com/dyweb/Ayi/tree/master/common/log 仿照 [logrus](https://github.com/sirupsen/logrus) 实现,\n目标功能类似 log4j ([logback](http://logback.qos.ch/))\n\n有以下几个特点\n\n- 支持类似 log4j 的按照 package 进行 filter，避免了:\n  - 开启 debug 之后大量输出淹没了需要的信息\n  - 为了 debug，把代码里的 debug 改成 info，忘记改回去\n- 支持更多的 Level (你想加个 Hearbreak 什么的 Level 也可以 `log.Hearbreak(\"got a good man card on New Year's Eve\")`)\n- 减少了 lock (不过没做 benchmark)\n- 移除了 logger 上与 logEntry 重复的接口\n\n之后计划\n\n- 改用 generator 生成代码，`Debugf` 和其他所有 `*f` 都只差一个单词，为什么要人写呢 (我就不说我拼写错误然后 painc 了)。\n- 支持 log4j 的 appender, transformer, xml etc.\n\n### Runner\n\n之前在自动化的部分已经基本说过了，所以就不说了(就是想加个标题)。\n\n### Structure\n\nGolang 内置的数据结构少的可怜，作为一个用了3天 python 的人当然要加一点数据结构。\n\n目前实现的有\n\n- [Set](https://github.com/dyweb/Ayi/tree/common-util/runner/common/structure)\n(一开始只有 Contains 没有 Add 用了才发现这个 Set 是 immutable 的)。\n- 没有然后了\n\n### Requests\n\n`net/http` 很好用，但是 `python` 的 `requests` 更简洁，不过这个轮子目前在[另一项目(xephon-b)里](https://github.com/xephonhq/xephon-b/tree/master/pkg/util/requests)\n\nBefore\n\n````golang\nfunc (client *KairosDBHTTPClient) Ping() error {\n\tres, err := http.Get(client.Config.Host.HostURL() + \"/api/v1/version\")\n\tif err != nil {\n\t\tlog.Warn(\"can't get kairosdb version\")\n\t\tlog.Debug(err.Error())\n\t\treturn err\n\t}\n\tdefer res.Body.Close()\n\tresContent, err := ioutil.ReadAll(res.Body)\n\tif err != nil {\n\t\tlog.Warn(\"can't read response body\")\n\t\tlog.Debug(err.Error())\n\t\treturn err\n\t}\n\tvar resData map[string]string\n\tif err := json.Unmarshal(resContent, \u0026resData); err != nil {\n\t\tlog.Warn(\"can't parse json\")\n\t\tlog.Debug(err.Error())\n\t\treturn err\n\t}\n\tlog.Info(\"KairosDB version is \" + resData[\"version\"])\n\treturn nil\n}\n````\n\nAfter\n\n````golang\nfunc (client *KairosDBHTTPClient) Ping() error {\n\tversionURL := client.Config.Host.HostURL() + \"/api/v1/version\"\n\tres, err := requests.GetJSON(versionURL)\n\tif err != nil {\n\t\treturn errors.Wrapf(err, \"can't reach KairosDB via %s\", versionURL)\n\t}\n\tlog.Info(\"KairosDB version is \" + res[\"version\"])\n\treturn nil\n}\n````\n\n## 开发计划\n\n上面说了那么多，一半都是画饼，可以从 issue 里看最近的进度\n\n- [正在开发的部分](https://github.com/dyweb/Ayi/issues?q=is%3Aopen+is%3Aissue+label%3Aworking)\n- [想做但是被搁置了的 issue](https://github.com/dyweb/Ayi/issues?utf8=%E2%9C%93\u0026q=is%3Aissue%20label%3Abacklog)\n\n~~欢迎感兴趣的女同学联系我! 我的微信是 `uictor`~~\n\n预计等到国内寒假的时候很多坑可以填完了，到时候欢迎假期想了解一下 Golang 的小伙伴来玩，我会加 `help wanted` 和难度的 label。\n\n## 开发人员\n\n[GitHub 传送门](https://github.com/dyweb/Ayi/graphs/contributors)\n\n- 咩在项目开始时提交了一些 shell 脚本，但是由于转到了 Golang 以及咩一向很忙，遂弃婶\n- @kdplus (丘) 参与过 `Ayi check` 的开发，不过那时我 Golang 菜的抠脚，导致丘也在划水。\n- @gaocegege (策策) 因为周报的功能，参与过一段时间的开发，\n引入了`Godep` 交叉编译，不过最后周报的功能并没有投入实用。\n\n## 总结\n\n- 等有钱了，给大家都配 MBP\n- 自己开的坑，不能让别人填 (我去开个找妹子的坑先)\n\n## 杂项\n\n- 使用 `git log -reverse` 可以反过来看 log, 可以用来找第一个提交。\n- shell 在 windows 下基本不会有问题，因为为了使用 git，东岳所有的 windows 用户都安装了\nmsysgit (现在叫 git for windows)，它自带了 bash 和一些基本的工具。\n- 周报的功能作为 MOS 的一个项目交给了 @codeworm96, 进度见[这个issue](https://github.com/dyweb/mos/issues/1)\n- [所有带 `backlog` 标签的 issue](https://github.com/dyweb/Ayi/issues?q=is%3Aissue+label%3Abacklog+is%3Aclosed)\n\n第一个提交\n````\ncommit 19858fe3958317da08dc512116c58acbd82b2a35\nAuthor: At15 \u003cat15@outlook.com\u003e\nDate:   Sun Jul 26 13:24:38 2015 +0800\n\n    Initial commit\n````\n\n## 更新\n\n## 引用\n\n## 许可协议\n\n- 本文遵守[创作共享CC BY-NC-SA 3.0协议](https://creativecommons.org/licenses/by-nc-sa/3.0/cn/)\n- 网络平台转载请联系 \u003cmarketing@dongyue.io\u003e\n","cover":"","link":"ayi.html","preview":"\u003cp\u003eAyi 跨平台的命令行工具(库)\u003c/p\u003e\n","title":"Ayi"}]